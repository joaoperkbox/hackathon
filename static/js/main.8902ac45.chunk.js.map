{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","events","data","birthdays","map","user","name","concat","FirstName","LastName","img","ImageURL","type","gifTag","anniversaries","years","moment","year","HireDate","probation_passed","num","tag","_this2","fetch","then","response","json","myJson","setState","url","images","fixed_height","_this$state","_this$container$getBo","container","getBoundingClientRect","width","height","getGif","_this$state2","_this3","_this$state3","react_default","a","createElement","className","onClick","bind","react_confetti_default","ref","element","alt","src","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8902ac45.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Confetti from \"react-confetti\"\nimport data from \"./users.json\"\nimport moment from \"moment\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      events: data.birthdays.map((user) => {return {\n        name: `${user.FirstName} ${user.LastName}`,\n        img: user.ImageURL,\n        type: \"birthday\",\n        gifTag: \"birthday\"\n      }}).concat(\n      data.anniversaries.map((user) => {return {\n        name: `${user.FirstName} ${user.LastName}`,\n        years: moment().year() - moment(user.HireDate).year(),\n        img: user.ImageURL,\n        type: \"anniversary\",\n        gifTag: \"celebration\"\n      }})).concat(\n      data.probation_passed.map((user) => {return {\n        name: `${user.FirstName} ${user.LastName}`,\n        img: user.ImageURL,\n        type: \"probation\",\n        gifTag: \"celebration\"\n      }})),\n      num: 0\n    }\n  }\n\n  getGif(tag) {\n    fetch(`http://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC&tag=${tag}`)\n      .then((response) => {\n        return response.json();\n      })\n      .then((myJson) => {\n        this.setState({\n          url: myJson.data.images.fixed_height.url\n        })\n      });\n  }\n\n  componentDidMount() {\n    const {events, num} = this.state\n    const {width, height} = this.container.getBoundingClientRect()\n    this.getGif(events[num].gifTag)\n\n    this.setState({\n      width,\n      height\n    })\n  }\n\n  onClick() {\n    const {events, num} = this.state\n    if(events[num + 1]) {\n      this.getGif(events[num + 1].gifTag)\n\n      this.setState({\n        num: num + 1\n      })\n    }\n  }\n\n  render() {\n    const {height, width, events, num} = this.state\n    const user = events[num]\n\n    const msg = () => {\n      if(user.type === \"birthday\") {\n        return <div className=\"message\">\n          Happy Birthday {user.name}!\n          <img alt=\"\" src={user.img} height=\"170px\" width=\"170px\"/>\n        </div>\n      }\n\n      if(user.type === \"anniversary\") {\n        return <div className=\"message\">\n          {user.name} has been here for an astonishing {user.years} years! Happy Anniversary!  \n          <img alt=\"\" src={user.img} height=\"170px\" width=\"170px\"/>\n        </div>\n      }\n\n      if(user.type === \"probation\") {\n        return <div className=\"message\">\n          As of today {user.name} has passed their 3 month probation! Well done!\n          <img alt=\"\" src={user.img} height=\"170px\" width=\"170px\"/>\n        </div>\n      }\n\n      return null\n    }\n\n    return (\n      <div className=\"App\" onClick={this.onClick.bind(this)}>\n        {height && <Confetti width={width} height={height} />}\n        <div className=\"birthday\" ref={(element) => { this.container = element }}>\n          <div className=\"name\">\n          {msg()}\n          </div>\n          <div className=\"gif\"><img src={this.state.url} alt=\"\"/></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}